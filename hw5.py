import pathlib
from typing import Tuple, Union

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd


class QuestionnaireAnalysis:
    """Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.

    Usage: "read_data" loads the data into memory, and the rest of the methods
    can be called out of order as they assume that the data is already in
    self.data.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data_fname = self._validate_and_resolve_path(data_fname)

    def _validate_and_resolve_path(self, path_input):
        try:
            resolved_path = pathlib.Path(path_input).resolve(strict=True)
        except (TypeError, FileNotFoundError):
            raise ValueError(f"Invalid or non-existent file: {path_input}")
        return resolved_path

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
        """
        age_range = (0, 100)
        bin_count = 10
        age_bins = np.linspace(*age_range, bin_count + 1)

        fig, ax = plt.subplots(figsize=(10, 6))
        histogram, bin_edges, _ = ax.hist(self.data["age"].dropna(), bins=age_bins, edgecolor='black')

        ax.set_xlabel("Age Range")
        ax.set_ylabel("Participant Count")
        ax.set_title("Age Distribution of Survey Participants")

        return histogram, bin_edges

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        pd.DataFrame
            A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
            the (ordinal) index after a reset.
        """
        return self.data[self.data["email"].apply(self._validate_email)].reset_index(drop=True)

    def _validate_email(self, email: str) -> bool:
        """Checks if an email is valid.

        Parameters
        ----------
        email : str
            The string to validate

        Returns
        -------
        bool
            True if email is valid, False otherwise
        """
        if not isinstance(email, str) or not email.isascii():
            return False

        parts = email.split('@')
        if len(parts) != 2:
            return False

        local, domain = parts
        if not local or not domain:
            return False

        if local[0] == '.' or local[-1] == '.' or '..' in local:
            return False

        if '.' not in domain or domain[0] == '.' or domain[-1] == '.' or '..' in domain:
            return False

        return True

    def _find_rows_with_nulls(self) -> np.ndarray:
        """Finds rows which contain at least one NA
        and returns their index as an array.

        Returns
        -------
        np.ndarray
            Indices of rows with at least one NA.
        """
        question_data = self.data.loc[:, "q1":"q5"]
        return question_data.isna().any(axis=1).to_numpy().nonzero()[0]

    def _fill_na_with_mean(self) -> pd.DataFrame:
        """Fills the dataframe with means instead of NAs.

        To generate the corrected DF we'll construct an identically-sized DF
        that contains only the means per students, and we'll use the "where"
        method to swap the NA values with the values from the "means" DataFrame.

        Returns
        -------
        pd.DataFrame
            DF with the mean of the row instead of the NA value
        """
        question_data = self.data.loc[:, "q1":"q5"]
        row_means = question_data.mean(axis=1)
        mean_filled = question_data.fillna(row_means, axis=0)
        return mean_filled

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        2-tuple of (pd.DataFrame, np.ndarray)
            The corrected DataFrame after insertion of the mean grade and row
            indices of the students that their new grades were generated
        """
        null_indices = self._find_rows_with_nulls()
        filled_grades = self._fill_na_with_mean()
        result_df = self.data.copy()
        result_df.loc[:, "q1":"q5"] = filled_grades
        return result_df, null_indices

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score should be 'UInt8', and the floating point raw numbers should be
        rounded down before the conversion.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        question_data = self.data.loc[:, "q1":"q5"]
        nan_count = question_data.isna().sum(axis=1)
        
        avg_scores = question_data.mean(axis=1)
        valid_scores = avg_scores.where(nan_count <= maximal_nans_per_sub)
        
        self.data["score"] = valid_scores.fillna(0).astype("uint8").astype("UInt8")
        self.data.loc[nan_count > maximal_nans_per_sub, "score"] = pd.NA
        
        return self.data

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """
        df = self.data.dropna(subset=['age']).copy()
        df['age'] = df['age'] > 40
        
        return df.groupby(['gender', 'age'])[['q1', 'q2', 'q3', 'q4', 'q5']].mean()
